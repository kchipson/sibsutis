import copy
import decimal
from decimal import Decimal as Dec
from functools import reduce
from typing import List

import numpy as np
import sympy as sp

import matplotlib.pyplot as plt

decimal.getcontext().rounding = decimal.ROUND_HALF_UP
ROUD = decimal.getcontext().prec = 40

S_X = sp.symbols('x')
FUNC = sp.S("sqrt(x)")


def funcr(x: Dec) -> Dec:
    return np.sqrt(x)


def func(function, x: Dec) -> Dec:
    """
    –ù–∞—Ö–æ–∂–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ-–∏–∏ –≤ —Ç–æ—á–∫–µ
    :param function: —Ñ—É–Ω–∫—Ü–∏—è
    :param x: —Ç–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ-–∏–∏ –≤ —Ç–æ—á–∫–µ
    """
    # return Dec(str(function.subs(S_X, x)))
    # f = sp.lambdify(S_X, function, 'numpy')
    return Dec(str(function.subs(S_X, sp.Float(str(x), ROUD))))


def diff_func(function, n: int, x: Dec) -> Dec:
    """
    –ù–∞—Ö–æ–∂–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π n-–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤ —Ç–æ—á–∫–µ
    :param function: —Ñ—É–Ω–∫—Ü–∏—è
    :param n: –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
    :param x: —Ç–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π n-–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    """
    # print(type(function))
    # print(type(sp.diff(function, S_X, n)))
    diff = sp.diff(function, S_X, n)
    return Dec(str(diff.subs(S_X, sp.Float(str(x), ROUD))))


def lagrange(x_arr: List[Dec], y_arr: List[Dec], x: Dec) -> Dec:
    length: int = len(x_arr)
    result: Dec = Dec("0.0")

    for i in range(length):
        tmp = list(range(length))
        tmp.remove(i)
        q: Dec = Dec("1.0")
        for j in tmp:
            q *= (x - x_arr[j]) / (x_arr[i] - x_arr[j])
        result += y_arr[i] * q

    return result


def eitken(x_arr: List[Dec], y_arr: List[Dec], x: Dec) -> Dec:
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω. –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞
    :param x_arr: –°–ø–∏—Å–æ–∫ x
    :param y_arr: –°–ø–∏—Å–æ–∫ y
    :param x: –¢–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
    """
    length = len(x_arr)
    p: List[List[Dec]] = list()
    p.append(y_arr)

    for i in range(1, length):
        p.append([])
        for j in range(length - i):
            tmp = (p[i - 1][j] * (x - x_arr[j + i]) - p[i - 1][j + 1] * (x - x_arr[j])) / (x_arr[j] - x_arr[j + i])
            p[i].append(tmp)

    return p[-1][0]


def delta_y(y_arr: List[Dec], dop_y: Dec = None) -> List[List[Dec]]:
    del_y: List[List[Dec]] = [copy.deepcopy(y_arr)]
    n = len(y_arr) - 1
    if dop_y:
        del_y[0].append(dop_y)
        n += 1 
  

    for i in range(n - 1):
        tmp = []
        for j in range(len(del_y[i]) - 1):
            tmp.append(del_y[i][j + 1] - del_y[i][j])
        del_y.append(tmp)

    return del_y


def factorial(x) -> Dec:
    fact: Dec = Dec("1")
    for j in range(2, x + 1):
        fact *= j
    return fact


def newton_1(x_arr: List[Dec], del_y: List[List[Dec]], x: Dec, flag = True) -> Dec:
    q = (x - x_arr[0]) / (x_arr[1] - x_arr[0])
    qq = Dec("1")
    result = Dec("0")
    if flag:
        n = len(del_y) - 1
    else:
        n = len(del_y)

    for i in range(n):
        result += (del_y[i][0] / factorial(i)) * qq
        qq *= (q - i)

    return result


def newton_2(x_arr: List[Dec], del_y: List[List[Dec]], x: Dec, flag =True):
    q = (x - x_arr[-1]) / (x_arr[1] - x_arr[0])
    qq = Dec("1")
    result = Dec("0")
    if flag:
        n = len(del_y) - 1
    else:
        n = len(del_y)

    # print(len(del_y[0]), len(del_y))


    for i in range(n):
        result += (del_y[i][n - i] / factorial(i)) * qq
        qq *= (q + i)

    return result


def print_res(x_arr: List[Dec], y_arr: List[Dec], label: str = None, inaccuracy: List[Dec] = None):
    if y_arr:
        if label:
            print('\n' + label)
        if inaccuracy:
            for i in range(len(x_arr)):
                print(
                    f"x = {x_arr[i]}  -->  y = {y_arr[i]}  |  E = {-inaccuracy[i] if inaccuracy[i] < 0 else inaccuracy[i]}")
        else:
            for i in range(len(x_arr)):
                print(f"x = {x_arr[i]}  -->  y = {y_arr[i]}")


def main():
    fun = sp.sqrt(S_X)
    # fun = sp.S(input("f(x) = "))
    print("f(x) = ", fun)
    # a, b = Dec("1.0"), Dec("10.0")
    # a, b = list(map(lambda f: Dec(str(f)), input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) : ").split(' ')))
    # c = Dec("0.1")
    # c = Dec(str(input("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥: ")))

    x0 = Dec(input("x0 = "))
    n = int(input("n = "))
    cc = Dec(input("–®–∞–≥ = "))


    a, b, c = Dec("1.0") , Dec("10.0"), Dec("0.1")

    initial_x: List[Dec] = list(Dec(x0 + i * cc) for i in range(n + 1))
    print(initial_x)

    # initial_x = list(Dec(i) for i in np.arange(a, (b + c), c))
    # if initial_x[-1] > b:
    #     initial_x = initial_x[:-1]
    # n = len(initial_x) - 1

    initial_y: List[Dec] = list(func(fun, i) for i in initial_x)
    print(initial_y)

    # x: List[Dec] = list((Dec("1"), Dec("2"), Dec("3")))
    x = list(Dec(i) for i in np.arange(a, (b + c), c))
    # x: List[Dec] = list(Dec(i) for i in input(f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"
                                            #   f" [{min(initial_x)}, {max(initial_x)}] (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) : ").split(' '))

    # print(x)

    # for i in x:
    #     if i < min(initial_x) or i > max(initial_x):
    #         raise ValueError(f"Achtung!!! –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \"{i}\" —Ç–æ—á–∫–∏, "
    #                          f"–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∏–Ω—Ç–µ–≤–∞–ª–µ [{min(initial_x)}, {max(initial_x)}]")

    y_lagrange: List[Dec] = list(lagrange(initial_x, initial_y, i) for i in x)
    y_eitken: List[Dec] = list(lagrange(initial_x, initial_y, i) for i in x)

    table_of_final_differences = delta_y(initial_y, func(fun, (x[-1] + cc)))

    if table_of_final_differences:
        y_newton1: List[Dec] = list(newton_1(initial_x, table_of_final_differences, i) for i in x)
        y_newton2: List[Dec] = list(newton_2(initial_x, table_of_final_differences, i) for i in x)
    else:
        y_newton1 = []
        y_newton2 = []

    # print_res(x, y_lagrange, "\"\"\"     –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞     \"\"\"")
    # print_res(x, y_eitken, "\"\"\"      –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏.  –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞      \"\"\"")
    # print_res(x, y_newton1, "\"\"\"    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #1    \"\"\"")
    # print_res(x, y_newton2, "\"\"\"    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #2    \"\"\"")

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (n+1)-–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    mxdn = lambda f: max([diff_func(fun, n + 1, i) for i in initial_x] + [diff_func(fun, n + 1, f)])
    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ (x-x0) * ... * (x-xn)
    pxx = lambda f: reduce(lambda xx, yy: xx * yy, list((f - i) for i in initial_x))

    # TODO : –í —Ñ–æ—Ä–º—É–ª–µ –Ω–µ —É–≤–µ—Ä–µ–Ω üôÉ:/
    e_ycech = ([Dec(str(mxdn(i) * (pxx(i)) / (factorial(n + 1)))) for i in x] if fun else [])  # —É—Å–µ—á–µ–Ω–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    # print(*e_ycech)
    input("\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter(x2)")

    """~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"""
    """~~~~~~~~~~~~~ –ì–†–ê–§–ò–ö–ò ~~~~~~~~~~~~~"""
    """~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"""

    fun_g_y = [func(fun, i) for i in x]
    """ –û–ö–ù–û #1 """

    win_2 = plt.figure(facecolor="#FCFFB2",
                       num="–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏")  # –§–∏–≥—É—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏
    mng = plt.get_current_fig_manager()
    mng.full_screen_toggle()
    # mng.resize(*mng.window.maxsize())
    canvas_lagrange = win_2.add_subplot(221)  # —Ñ–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞
    canvas_lagrange.grid(True)
    canvas_lagrange.set_title(label="–§–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞", weight="bold")
    # canvas_lagrange.set_xlim(-5, 15)
    canvas_lagrange.plot(x, fun_g_y, linestyle="-", color="r")
    canvas_lagrange.plot(x,  y_lagrange, linestyle=":", color="blue")
    # canvas_lagrange.scatter(x, y_lagrange, marker='*', s=20, c="red")

    canvas_eitken = win_2.add_subplot(222)  # –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞
    canvas_eitken.grid(True)
    canvas_eitken.set_title(label="–°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞", weight="bold")
    # canvas_eitken.set_xlim(-5, 15)
    canvas_eitken.plot(x, fun_g_y, linestyle="-", color="r")
    canvas_eitken.plot(x, y_eitken, linestyle=":", color="green")
    # canvas_eitken.scatter(x, y_eitken, marker='D', s=20, c="blue")

    canvas_newton1 = win_2.add_subplot(223)  # –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ ‚Ññ1
    canvas_newton1.grid(True)
    canvas_newton1.set_title(label="–§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #1", weight="bold")
    # canvas_newton1.set_xlim(-5, 15)
    canvas_newton1.plot(x, fun_g_y, linestyle="-", color="r")
    canvas_newton1.plot(x, y_newton1, linestyle=":", color="green")
    # canvas_newton1.scatter(x, y_newton1, marker='x', s=20, c="green")

    canvas_newton2 = win_2.add_subplot(224)  # –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ ‚Ññ2
    canvas_newton2.grid(True)
    canvas_newton2.set_title(label="–§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #2", weight="bold")
    # canvas_newton2.set_xlim(-5, 15)
    canvas_newton2.plot(x, fun_g_y, linestyle="-", color="r")
    canvas_newton2.plot(x, y_newton2, linestyle=":", color="blue")
    # canvas_newton2.scatter(x, y_newton2, marker='o', s=20, c="magenta")

    plt.show()


if __name__ == '__main__':
    main()

    # fun = S_X ** 2
    #
    # a = sp.Float("500000.5555555555555555555555555555555555555555555555555555555555555550")
    # # print(a)
    # print(ff(fun, a))
    # # print(Dec("1.0") / a)
