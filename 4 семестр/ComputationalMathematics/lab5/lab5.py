import copy
import decimal
import sys
from decimal import Decimal as Dec
from functools import reduce
import csv
import numpy as np
import sympy as sp
import matplotlib
import matplotlib.pyplot as plt

CSV_PATH = "data.csv"
X = sp.symbols('x')


def csv_reader(name: str):
    """
    –ß—Ç–µ–Ω–∏–µ csv-—Ñ–∞–π–ª–∞
    :param name: –∏–º—è —Ñ–∞–π–ª–∞
    :return: –°–ª–æ–≤–∞—Ä–∏ x –∏ y
    """
    x = []
    y = []
    with open(CSV_PATH, "r") as file:
        reader = csv.DictReader(file, delimiter=';')
        for row in reader:
            x.append(Dec(str(row['x'])))
            y.append(Dec(str(row['y'])))
    return [x, y]


def lagrange(x: list, y: list, n: int, point: Dec):
    """
     –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω. –§–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞
    :param x: —Å–ø–∏—Å–æ–∫ x
    :param y: —Å–ø–∏—Å–æ–∫ y
    :param n: –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ n —Ç–æ—á–∫–∞–º
    :param point: —Ç–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
    """
    res = Dec()
    for i in range(n + 1):
        tmp = [j for j in range(n + 1)]
        tmp.remove(i)
        q = 1
        for j in tmp:
            q *= (point - x[j]) / (x[i] - x[j])
        res += y[i] * q

    return res.normalize()


def eitken_old(x: list, y: list, a: int, b: int, point: Dec):
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω. –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞
    :param x: –°–ø–∏—Å–æ–∫ x
    :param y: –°–ø–∏—Å–æ–∫ y
    :param a:
    :param b:
    :param point: –¢–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
    """
    if a == b:
        return Dec(y[a])
    else:
        return Dec((eitken(x, y, a, b - 1, point) * (point - x[b]) - eitken(x, y, a + 1, b, point) * (point - x[a])) / (
                    x[a] - x[b]))


def eitken(x: list, y: list, point: Dec):
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω. –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞
    :param x: –°–ø–∏—Å–æ–∫ x
    :param y: –°–ø–∏—Å–æ–∫ y
    :param point: –¢–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
    """
    n = len(x)
    p = list()
    p.append(y)

    for i in range(1, n):
        p.append([])
        for j in range(n - i):
            tmp = (p[i - 1][j] * (point - x[j + i]) - p[i - 1][j + 1] * (point - x[j])) / (x[j] - x[j + i])
            p[i].append(tmp)

    return p[-1][0]


def delta_y(x, h, fun):
    """
    –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π
    :param x: —Å–ø–∏—Å–æ–∫ x
    :param h: —à–∞–≥
    :param fun: —Ñ—É–Ω–∫—Ü–∏—è
    :return: "–ú–∞—Ç—Ä–∏—Ü–∞" –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π
    """
    for i in range(len(x) - 1):
        if x[i] + h != x[i + 1]:
            print(f"Achtung!!! –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–≥—É \"{h}\"")
            return []
    del_y = [[func(fun, i) for i in x]]
    (del_y[0]).append(func(fun, x[-1] + h))

    for i in range(len(del_y[0]) - 1):
        temp = []
        for j in range(len(del_y[i]) - 1):
            temp.append(del_y[i][j + 1] - del_y[i][j])
        del_y.append(temp)
    return del_y


def newton_1(x, del_y, point):
    q = (point - x[0]) / (x[1] - x[0])
    qq = 1
    res = Dec()

    for i in range(len(del_y) - 1):
        res += (del_y[i][0] / sp.factorial(i)) * qq
        qq *= (q - i)

    return res


def newton_2(x, del_y, point):
    q = (point - x[-1]) / (x[1] - x[0])
    qq = 1
    res = Dec()

    for i in range(len(del_y) - 1):
        res += (del_y[i][n - i] / sp.factorial(i)) * qq
        qq *= (q + i)

    return res


def print_res(x: list, y: list, e: list = None):
    if e:
        for i in range(len(x)):
            print(f"x = {x[i]}  -->  y = {y[i]}  |  E = {-e[i] if e[i] < 0 else e[i]}")
    else:
        for i in range(len(x)):
            print(f"x = {x[i]}  -->  y = {y[i]}")


def func(function, x):
    """
    –ù–∞—Ö–æ–∂–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ-–∏–∏ –≤ —Ç–æ—á–∫–µ
    :param function: —Ñ—É–Ω–∫—Ü–∏—è
    :param x: —Ç–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ-–∏–∏ –≤ —Ç–æ—á–∫–µ
    """
    return Dec(str(function.subs(X, x)))


def diff_funcs(function, n, x):
    """
    –ù–∞—Ö–æ–∂–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π n-–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤ —Ç–æ—á–∫–µ
    :param function: —Ñ—É–Ω–∫—Ü–∏—è
    :param n: –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
    :param x: —Ç–æ—á–∫–∞
    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π n-–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    """
    diff = sp.diff(function, X, n)
    return Dec(str(diff.subs(X, x)))


def main():
    # x, y = csv_reader(CSV_PATH)

    fun = sp.sqrt(X)  # sp.S(input("f(x) = "))
    print("f(x) = ", fun)
    a, b = Dec("1"), Dec("10")
    # list(map(lambda f: Dec(f), input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª [a, b](—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):  ").split(" ")))  # Dec("1"), Dec("2.5")
    c = Dec("0.1")  # Dec(input("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥:  "))  #

    x = list(filter(lambda f: f <= b, [Dec(i) for i in np.arange(a, b + c, c)]))  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ x
    y = [func(fun, i) for i in x]  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ y
    print("x :  ", end="")
    print(*x, sep=" ; ")
    print("y :  ", end="")
    print(*y, sep=" ; ")

    new_x = [Dec("1.21"), Dec("1.69"), Dec("1.96"), Dec("2.25"), Dec("4.41")]
    # sorted(list(map(lambda f: Dec(f), input(f"–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—ã–µ –¥–∞–Ω–Ω—ã–µ(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [{min(x)}, {max(x)}]:  ").split(" "))))  # sorted([Dec("1.69"), Dec("1.85"), Dec("1.95")])
    n = len(x) - 1
    del_y = delta_y(x, c, fun)
    # print(*del_y, sep="\n")

    lagrange_y = []
    eitken_y = []
    newton_1_y = []
    newton_2_y = []
    for i in new_x:
        if i < min(x) or i > max(x):
            raise ValueError(
                "Achtung!!! "
                f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \"{i}\" —Ç–æ—á–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∏–Ω—Ç–µ–≤–∞–ª–µ [{min(x)}, {max(x)}]")
        print(i)
        lagrange_y.append(lagrange(x, y, n, i))
        print("la")
        eitken_y.append(eitken(x, y, i))
        print("ei")
        if del_y:
            newton_1_y.append(newton_1(x, del_y, i))
            print("n1")
            newton_2_y.append(newton_1(x, del_y, i))
            print("n2")

    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (n+1)-–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    mxdn = lambda qq: max([diff_funcs(fun, n + 1, xx) for xx in x] + [diff_funcs(fun, n + 1, qq)])
    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ (x-x0)...(x-xn)
    pxx = lambda qq: reduce(lambda xx, yy: xx * yy, list((qq - i) for i in x))

    # TODO : –í —Ñ–æ—Ä–º—É–ª–µ –Ω–µ —É–≤–µ—Ä–µ–Ω üôÉ:/
    e = ([Dec(str(mxdn(xx) * (pxx(xx)) / (sp.factorial(n + 1)))) for xx in new_x] if fun else [])

    print('\n"""          –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞          """\n' + '"' * 69)
    print_res(new_x, lagrange_y)
    print('\n"""            –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞           """\n' + '"' * 69)
    print_res(new_x, eitken_y)
    print('\n"""          –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #1        """\n' + '"' * 69)
    print_res(new_x, newton_1_y)
    print('\n"""          –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #2        """\n' + '"' * 69)
    print_res(new_x, newton_2_y)
    print('\n"""          –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏. –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #2        """\n' + '"' * 69)

    input("\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter(x2)")

    fff = plt.figure(facecolor="#DFB1F9", num="–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")  # –§–∏–≥—É—Ä–∞ —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    ff = fff.add_subplot(111)  # –ü–æ–ª–æ—Ç–Ω–æ —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    ff.grid(True)
    ff.set_title(label="f(x) = " + str(fun),
                 size="xx-large",
                 weight="bold")
    ff.set_xlim([x[0], x[-1]])
    ff.set_ylim([y[0], y[-1]])
    ff.set_xlabel("–û—Å—å –∞–±—Ü–∏—Å")
    ff.set_ylabel("–û—Å—å –æ—Ä–¥–∏–Ω–∞—Ç")
    ff.plot(x, y,
            linestyle="-",
            color="r",
            )
    mng = plt.get_current_fig_manager()
    mng.full_screen_toggle()
    # mng.resize(*mng.window.maxsize())

    nnn = plt.figure(facecolor="#FCFFB2",
                     num="–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏")  # –§–∏–≥—É—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞–º–∏
    la = nnn.add_subplot(221)  # —Ñ–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞
    la.grid(True)
    la.set_title(label="–§–æ—Ä–º—É–ª–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞", weight="bold")
    # la.plot(new_x, lagrange_y, linestyle=":", color="red")
    la.set_xlim([x[0], x[-1]])
    la.scatter(new_x, lagrange_y, marker='*', s=20, c="red")
    ei = nnn.add_subplot(222)  # –°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞
    ei.grid(True)
    ei.set_title(label="–°—Ö–µ–º–∞ –≠–π—Ç–∫–µ–Ω–∞", weight="bold")
    ei.set_xlim([x[0], x[-1]])
    # ei.plot(x, [eitken(x, y, 0, n, i) for i in x])
    # ei.plot(new_x, eitken_y, linestyle=":", color="blue")
    ei.scatter(new_x, lagrange_y, marker='D', s=20, c="blue")
    n1 = nnn.add_subplot(223)  # –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ ‚Ññ1
    n1.grid(True)
    n1.set_title(label="–§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #1", weight="bold")
    n1.set_xlim([x[0], x[-1]])
    n1.plot(x, [newton_1(x, del_y, i) for i in x])
    # n1.plot(new_x, newton_1_y, linestyle=":", color="green")
    n1.scatter(new_x, lagrange_y, marker='x', s=20, c="green")
    n2 = nnn.add_subplot(224)  # –§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ ‚Ññ2
    n2.grid(True)
    n2.set_title(label="–§–æ—Ä–º—É–ª–∞ –ù—å—é—Ç–æ–Ω–∞ #2", weight="bold")
    n2.set_xlim([x[0], x[-1]])
    n2.plot(x, [newton_1(x, del_y, i) for i in x])
    # n2.plot(new_x, newton_2_y, linestyle=":", color="magenta")
    n2.scatter(new_x, lagrange_y, marker='o', s=20, c="magenta")
    mng = plt.get_current_fig_manager()
    mng.full_screen_toggle()
    # mng.resize(*mng.window.maxsize())

    plt.show()


if __name__ == "__main__":
    sys.setrecursionlimit(2000)
    decimal.getcontext().rounding = decimal.ROUND_HALF_UP
    # decimal.getcontext().prec = 18
    # print(decimal.getcontext())
    main()
    # test()
