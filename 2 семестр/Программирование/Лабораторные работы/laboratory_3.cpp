#include <stdlib.h>
#include <iostream>
#include <ctime>
using namespace std;

int one()
{
	//1.Используя функцию malloc(), выделить память под одномерный динамический массив b[n] (n вводить с клавиатуры).
	// Заполнить его целыми случайными числами в диапазоне  -50 … 50.
	// Получить  динамический массив c[m], содержащий положительные числа массива b, и  динамический массив d[k],
	// содержащий отрицательные числа. m и k должны быть равны количеству положительных и отрицательных чисел.
	// Вывести исходный массив и полученные массивы. Освободить память.
	int i = 0, n = 0, m = 0, k = 0;
	int *b, *c, *d;
	cout << "Размерность начального массива: ";
	cin >> n;

	b = (int *)malloc(n * sizeof(int));
	if (b == NULL) // если не удалось выделить память
	{
		cout << " Не удалось выделить память\n";
		return 1; // выход по ошибке, код ошибки 1
	}

	for (i = 0; i < n; i++)
	{
		b[i] = rand() % 101 - 50;
	}

	for (i = 0; i < n; i++)
	{
		if (b[i] > 0)
			m++;
		if (b[i] < 0)
			k++;
	}

	c = (int *)malloc(m * sizeof(int));
	d = (int *)malloc(k * sizeof(int));

	if ((c == NULL) or (d == NULL)) // если не удалось выделить память
	{
		cout << " Не удалось выделить память\n";
		return 1; // выход по ошибке, код ошибки 1
	}

	m = k = 0;
	for (i = 0; i < n; i++)
	{
		if (b[i] > 0)
		{
			c[m] = b[i];
			m++;
		}
		else if (b[i] < 0)
		{

			d[k] = b[i];
			k++;
		}
	}

	cout << "\nИсходный массив b:\n";
	for (i = 0; i < n; i++)
	{
		cout << b[i] << "  ";
	}

	cout << "\n\nПоложительный массив c:\n";
	for (i = 0; i < m; i++)
	{
		cout << c[i] << "  ";
	}

	cout << "\n\nОтрицательный массив d:\n";
	for (i = 0; i < k; i++)
	{
		cout << d[i] << "  ";
	}

	cout << "\n\n";
	free(b);
	free(c);
	free(d);
	b = c = d = NULL;
	return 0;
}

int two()
{
	//2. Используя оператор new, выделить память под одномерный динамический массив a[n] (n вводить с клавиатуры) и массив указателей b[n].
	//Заполнить массив a вещественными случайными числами,  а  массив b адресами элементов массива a. Отсортировать массив по возрастанию,
	//используя  массив указателей . Исходный массив измениться не должен. Вывести исходный  и отсортированный массив. Освободить память.
	int n, i;
	float *a;
	float **b;
	cout << "Размерность начального массива: ";
	cin >> n;

	a = new float[n];
	b = new float *[n];
	if ((a == NULL) || (b == NULL)) // если не удалось выделить память
	{
		cout << " Не удалось выделить память\n";
		return 1; // выход по ошибке, код ошибки 1
	}

	for (i = 0; i < n; i++)
	{
		a[i] = (float)rand() * (20) / RAND_MAX;
	}
	cout << "Начальный массив: " << endl;
	for (i = 0; i < n; i++)
	{
		cout << a[i] << endl;
	}
	cout << "```````````````````````````````````````````" << endl;
	cout << "Начальный массив указателей: " << endl;
	for (i = 0; i < n; i++)
	{
		b[i] = &a[i];
	}

	for (i = 0; i < n; i++)
	{
		cout << b[i] << " ";
	}

	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - i - 1; j++)
		{
			if (*b[j] > *b[j + 1])
			{
				float *tmp = b[j];
				b[j] = b[j + 1];
				b[j + 1] = tmp;
			}
		}
	}

	cout << endl
		 << "```````````````````````````````````````````" << endl;
	cout << "Измененный массив указателей: " << endl;

	for (i = 0; i < n; i++)
	{
		cout << b[i] << " ";
	}

	cout << endl
		 << "```````````````````````````````````````````" << endl;
	cout << "Массив через отсортированный массив указателей: " << endl;
	for (i = 0; i < n; i++)
	{
		cout << *b[i] << " ";
	}
	cout << endl;
	return 0;
}

int three()
{
	//3. Ввести с клавиатуры число n, вычислить и вывести с помощью алгоритма "решето Эратосфена"(изучить  алгоритм самостоятельно)
	// простые числа в диапазон от 2 до n. Использовать динамический массив размера n.
	int *A, n;

	cout << "Число: ";
	cin >> n;

	A = new int[n - 1];

	if ((A == NULL)) // если не удалось выделить память
	{
		cout << " Не удалось выделить память\n";
		return 1; // выход по ошибке, код ошибки 1
	}

	for (int i = 0; i <= n - 2; i++)
	{
		A[i] = i + 2;
		cout << A[i] << " ";
	}

	for (int i = 0; A[i] * A[i] <= n - 2; i++)
	{
		if (A[i])
			for (int j = A[i] * A[i] - 2; j <= n - 2; j += A[i])
			{
				if (A[j] % A[i] == 0)
					A[j] = 0;
			}
	}
	cout << endl;
	for (int i = 0; i <= n - 2; i++)
	{
		if (A[i] != 0)
			cout << A[i] << " ";
	}
	cout << endl;

	return 0;
}

main()
{
	setlocale(LC_ALL, "Russian");
	system("chcp 1251  > text");
	int choice;
	cout << "Input number of task (Number from 1 to 3):";
	cin >> choice;
	srand(time(NULL));
	if (choice == 1)
	{
		one();
	}
	else if (choice == 2)
	{
		two();
	}

	else if (choice == 3)
	{
		three();
	}

	system("PAUSE");
	return 0;
}
