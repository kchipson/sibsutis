;;; 1. Напишите сложную функцию, используя композиции функций CAR и CDR, 
;;; которая возвращает атом * при применении к следующему списку:
;;; 6) ((1 2) (3 (4 *) 5))

;; (write (CAR (CDR (CAR (CDR (CAR (CDR '((1 2) (3 (4 *) 5)))))))))
;; (write (CADR (CADADR '((1 2) (3 (4 *) 5)))))

(format t "1)~%~A~%~%"
    (CAR (CDR 
        (CAR (CDR 
            (CAR (CDR '((1 2) (3 (4 *) 5))
            ))
        ))
    ))
)


;;; 2. Объясните работу функций и определите результат обращения:
;;; 6) (append NIL '(a b c))
;;; Объяснение : APPEND - "склеивает" списки
;;; Результат  : (A B C)

(format t "2)~%~A~%~%" (APPEND NIL '(a b c)))


;;; 3. Из атомов 1, 2, 3, nil создайте указанные списки двумя способами:
;;; а) с помощью композиций функций CONS;
;;; б) с помощью композиций функций LIST.
;;; Список: 6) ((1(2 (3))))

;; (write (CONS (CONS 1 (CONS (CONS 2 (CONS (CONS 3 ()) ())) ())) ()))
(format t "3)~%а: ~A~%б: ~A~%~%" 
    ;; а)
    (CONS ;; Внешняя обертка
        (CONS 
            1 
            (CONS 
                (CONS 
                    2 
                    (CONS 
                        (CONS 
                            3
                            NIL
                        )
                        NIL
                    )
                ) 
                NIL
            )
        ) 
        NIL
    )
    ;; б)
    (LIST (LIST 1 (LIST 2 (LIST 3))))
)



;;; 4. С помощью DEFUN определите функцию, которая возвращает измененный список по
;;; заданию (в теле функции разрешается использовать только следующие встроенные
;;; функции: CAR, CDR, CONS, APPEND, LIST, LAST, BUTLAST с одним аргументом).
;;; Проверьте её работу, организуя обращение к функции со списками разной длины.
;;; 6) Функция меняет местами первый и третий элементы списка


(defun fun (x)
    ;; (CADDR x) - 3 элемент
    ;; (CDDDR x) - 4-n элементы
    ;; (CADR x) - 2 элемент
    ;;  (CAR x) - 1 элемент
    (APPEND (LIST (CADDR x)) (LIST (CADR x)) (LIST (CAR x)) (CDDDR x))
) 
(format t 
"4)
Пример 1: 
    Исходный: ~A
    Конечный: ~A
Пример 2: 
    Исходный: ~A
    Конечный: ~A
Пример 3: 
    Исходный: ~A
    Конечный: ~A
Пример 4: 
    Исходный: ~A
    Конечный: ~A
Пример 5: 
    Исходный: ~A
    Конечный: ~A" 
    '(1 2 3 4 5)
    (fun '(1 2 3 4 5))
    '(1 2 3 4 5 6 7 8 9 10)
    (fun '(1 2 3 4 5 6 7 8 9 10))
    '(1 2 3)
    (fun '(1 2 3))
    '(1 2)
    (fun '(1 2))
    '(1)
    (fun '(1))
)

